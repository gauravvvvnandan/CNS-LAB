#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <ctype.h>
#define MAX_SIZE 30
// Function to check if the key matrix is valid
int is_valid_key(int key[MAX_SIZE][MAX_SIZE], int size) {
 int det = 0;
 // Determinant calculation for 2x2 and 3x3 matrices
 if (size == 2) {
 det = key[0][0] * key[1][1] - key[0][1] * key[1][0];
 } else if (size == 3) {
 det = key[0][0] * (key[1][1] * key[2][2] - key[2][1] * key[1][2]) -
 key[0][1] * (key[1][0] * key[2][2] - key[2][0] * key[1][2]) +
 key[0][2] * (key[1][0] * key[2][1] - key[2][0] * key[1][1]);
 }

 return det != 0;
}
// Function to perform Hill cipher encryption
void hill_encrypt(char *message, int key[MAX_SIZE][MAX_SIZE], int size) {
 int len = strlen(message);
 int i, j, k, sum;
 int plain[MAX_SIZE];
 // Remove spaces and convert message to uppercase
 int temp_index = 0;
 for (i = 0; i < len; i++) {
 if (message[i] != ' ') {
 message[temp_index++] = toupper(message[i]);
 }
 }
 message[temp_index] = '\0';
 len = temp_index;

 // Pad the message with 'X' if it's not a multiple of key size
 while (len % size != 0) {
 message[len++] = 'X';
 }
 message[len] = '\0';

 // Encrypt the message
 for (i = 0; i < len; i += size) {
 // Convert block of characters to numbers
 for (j = 0; j < size; j++) {
 plain[j] = message[i + j] - 'A';
 }

 // Matrix multiplication taking matrix size into account
 for (j = 0; j < size; j++) {
 sum = 0;
 for (k = 0; k < size; k++) {
 sum += key[j][k] * plain[k];
 }
 message[i + j] = (sum % 26) + 'A';
 }
 }
}
int main() {
 int key[MAX_SIZE][MAX_SIZE];
 int key_size;
 int i, j;
 char message[1000];

 // Input key matrix size and elements
 printf("Enter the size of the key matrix (2 or 3): \n");
 scanf("%d", &key_size);
 printf("Enter the elements of the key matrix:\n");
 for (i = 0; i < key_size; i++) {
 for (j = 0; j < key_size; j++) {
 scanf("%d", &key[i][j]);
 }
 }

 // Check if the key matrix is valid
 if (!is_valid_key(key, key_size)) {
 printf("Invalid key matrix\n");
 return 1;
 }
 // Input the message to be encrypted
 printf("Enter the message to be encrypted:\n");
 getchar(); // to consume the newline character left by scanf
 fgets(message, sizeof(message), stdin);
 message[strcspn(message, "\n")] = 0; // Remove the newline character at the end

 // Perform Hill cipher encryption
 hill_encrypt(message, key, key_size);

 // Output the encrypted message
 printf("Encrypted Message is: %s\n", message);
 return 0;
}
